// Norminette -R CheckDefine
// cc -Wall -Werror -Wextra
/*
	ISALPHA

#include <unistd.h>
int	main(void)
{
	int	result;
	
	result = ft_str_is_alpha("abc");
	if (result == 0)
		write(1, "0", 1);
	else if (result == 1)
		write (1, "1", 1);
	return (0);
}
*/

 
/* 	ISDIGIT

#include "libft.h"
int main(void)
{
    printf("%d\n",ft_isdigit("1"));
}
 */


/* 	ISALNUM


#include "libft.h"

int main(void)
{
    printf("%d\n", ft_isalnum('('));
    printf("%d\n", ft_isalnum('1'));
    printf("%d\n", ft_isalnum('a'));
} */


/* 
	ISASCII

#include "libft.h"

int main(void)
{  
    printf("%d\n", ft_isascii(L'€')); //L prefix is for wide character like '€'
    printf("%d\n", ft_isascii('a')); 
}
 */

/*     ISPRINT

#include "libft.h"
int main(void)
{
    char    c =  '\a';
    printf("%d\n", ft_isprint(c));
}
 */

/* 
	STRLEN

#include "libft.h"

int main(void)
{
    int length = ft_strlen("thanh");
    printf("%d\n", length);
}
 */


/* 	MEMSET


int main(void)
{
    char    buffer[11];
    char    *pointer;

    ft_memset(buffer, '1', 11);
    pointer = buffer;
    while (pointer < buffer + 11)
    {
        printf("%c\n", *pointer);
        pointer++;
    }
    return (0);
}
 */

/*     BZERO

    
int main(void)
{
    char    buffer[10];
    char    *pointer;    
    
    char    buffer1[10];
    char    *pointer1;
    
    ft_bzero(buffer, 10);
    pointer = buffer;
    while (pointer < buffer + 10)
    {
        printf("%s\n", pointer);
        pointer++;
    }
    
    printf("%s\n", "Original:");

    bzero(buffer1, 10);
    pointer1 = buffer1;
    while (pointer1 < buffer1 + 10)
    {
        printf("%s\n", pointer1);
        pointer1++;
    }
    return (0);
} */

    // MEMCPY


/*     MEMMOVE


int main(void)
{
    char    src[] = "Hello, World!";
    char    *dest = src + 7;
//    memmove(dest, src, 6);
//     printf("%s\n", dest);

    ft_memmove(dest, src, 4);
    printf("%s\n", dest); 
    return (0);
}
 */

/*     STRLCPY
int main(void)
{
    char    dst[13];
    printf("%zu\n", ft_strlcpy(dst, "Hello, World!", 10)); //%zu is for size_t since in some system size_t ~ unsigned long - strlcpy copies to size - 1
    printf("%s\n", dst);
    return (0);
} */

    // STRLCAT
    // TOUPPER
    // TOLOWER
    // STRRCHR
    // STRNCMP
    // MEMCHR
    // MEMCMP
    // STRNSTR
    // ATOI
    // CALLOC
    // STRDUP

